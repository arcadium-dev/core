// Code generated by MockGen. DO NOT EDIT.
// Source: arcadium.dev/core/server (interfaces: GRPCServer,HTTPServer)

// Package mockserver is a generated GoMock package.
package mockserver

import (
	http "net/http"
	reflect "reflect"

	grpc "arcadium.dev/core/grpc"
	gomock "github.com/golang/mock/gomock"
)

// MockGRPCServer is a mock of GRPCServer interface.
type MockGRPCServer struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCServerMockRecorder
}

// MockGRPCServerMockRecorder is the mock recorder for MockGRPCServer.
type MockGRPCServerMockRecorder struct {
	mock *MockGRPCServer
}

// NewMockGRPCServer creates a new mock instance.
func NewMockGRPCServer(ctrl *gomock.Controller) *MockGRPCServer {
	mock := &MockGRPCServer{ctrl: ctrl}
	mock.recorder = &MockGRPCServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCServer) EXPECT() *MockGRPCServerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockGRPCServer) Register(arg0 []grpc.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register.
func (mr *MockGRPCServerMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGRPCServer)(nil).Register), arg0)
}

// Serve mocks base method.
func (m *MockGRPCServer) Serve(arg0 chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve", arg0)
}

// Serve indicates an expected call of Serve.
func (mr *MockGRPCServerMockRecorder) Serve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockGRPCServer)(nil).Serve), arg0)
}

// Stop mocks base method.
func (m *MockGRPCServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockGRPCServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockGRPCServer)(nil).Stop))
}

// MockHTTPServer is a mock of HTTPServer interface.
type MockHTTPServer struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServerMockRecorder
}

// MockHTTPServerMockRecorder is the mock recorder for MockHTTPServer.
type MockHTTPServerMockRecorder struct {
	mock *MockHTTPServer
}

// NewMockHTTPServer creates a new mock instance.
func NewMockHTTPServer(ctrl *gomock.Controller) *MockHTTPServer {
	mock := &MockHTTPServer{ctrl: ctrl}
	mock.recorder = &MockHTTPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPServer) EXPECT() *MockHTTPServerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockHTTPServer) Handle(arg0 http.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", arg0)
}

// Handle indicates an expected call of Handle.
func (mr *MockHTTPServerMockRecorder) Handle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHTTPServer)(nil).Handle), arg0)
}

// Serve mocks base method.
func (m *MockHTTPServer) Serve(arg0 chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve", arg0)
}

// Serve indicates an expected call of Serve.
func (mr *MockHTTPServerMockRecorder) Serve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockHTTPServer)(nil).Serve), arg0)
}

// Stop mocks base method.
func (m *MockHTTPServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockHTTPServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHTTPServer)(nil).Stop))
}
