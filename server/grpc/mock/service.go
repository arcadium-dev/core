// Code generated by MockGen. DO NOT EDIT.
// Source: arcadium.dev/core/server/grpc (interfaces: Service)

// Package mockgrpc is a generated GoMock package.
package mockgrpc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// LogFields mocks base method.
func (m *MockService) LogFields() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogFields")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// LogFields indicates an expected call of LogFields.
func (mr *MockServiceMockRecorder) LogFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFields", reflect.TypeOf((*MockService)(nil).LogFields))
}

// Register mocks base method.
func (m *MockService) Register(arg0 *grpc.Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register.
func (mr *MockServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockService)(nil).Register), arg0)
}
