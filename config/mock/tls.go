// Code generated by MockGen. DO NOT EDIT.
// Source: arcadium.dev/core/config (interfaces: TLS)

// Package mockconfig is a generated GoMock package.
package mockconfig

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTLS is a mock of TLS interface.
type MockTLS struct {
	ctrl     *gomock.Controller
	recorder *MockTLSMockRecorder
}

// MockTLSMockRecorder is the mock recorder for MockTLS.
type MockTLSMockRecorder struct {
	mock *MockTLS
}

// NewMockTLS creates a new mock instance.
func NewMockTLS(ctrl *gomock.Controller) *MockTLS {
	mock := &MockTLS{ctrl: ctrl}
	mock.recorder = &MockTLSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLS) EXPECT() *MockTLSMockRecorder {
	return m.recorder
}

// CACert mocks base method.
func (m *MockTLS) CACert() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CACert")
	ret0, _ := ret[0].(string)
	return ret0
}

// CACert indicates an expected call of CACert.
func (mr *MockTLSMockRecorder) CACert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CACert", reflect.TypeOf((*MockTLS)(nil).CACert))
}

// Cert mocks base method.
func (m *MockTLS) Cert() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cert")
	ret0, _ := ret[0].(string)
	return ret0
}

// Cert indicates an expected call of Cert.
func (mr *MockTLSMockRecorder) Cert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cert", reflect.TypeOf((*MockTLS)(nil).Cert))
}

// Key mocks base method.
func (m *MockTLS) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockTLSMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockTLS)(nil).Key))
}
